using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Text;
using CureTracker.Core.Interfaces;
using CureTracker.Core.Models;
using static CureTracker.Core.Enums.IntakeStatusEnum;

namespace CureTracker.TelegramBot
{
    public class TelegramNotificationService
    {
        private readonly TelegramBotClient _botClient;
        private readonly ILogger<TelegramNotificationService> _logger;
        private readonly IServiceScopeFactory _scopeFactory;

        public TelegramNotificationService(
            IConfiguration configuration,
            ILogger<TelegramNotificationService> logger,
            IServiceScopeFactory scopeFactory)
        {
            var token = configuration.GetSection("TelegramBot:Token").Value;
            if (string.IsNullOrEmpty(token))
            {
                _logger.LogError("Telegram Bot Token is not configured.");
                throw new ArgumentNullException(nameof(token), "Telegram Bot Token cannot be null or empty.");
            }
            _botClient = new TelegramBotClient(token);
            _logger = logger;
            _scopeFactory = scopeFactory;
        }

        public async Task SendNotificationAsync(long chatId, string message, Guid intakeId)
        {
            try
            {
                var inlineKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–∏–Ω—è—Ç–æ", callbackData: $"intake_taken_{intakeId}"),
                        InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–æ–ø—É—â–µ–Ω–æ", callbackData: $"intake_skipped_{intakeId}"),
                    }
                });

                await _botClient.SendMessage(
                    chatId: chatId,
                    text: message,
                    replyMarkup: inlineKeyboard,
                    cancellationToken: default);

                _logger.LogInformation($"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è intakeId {intakeId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {chatId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è intakeId {intakeId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {chatId}");
            }
        }

        public Task StartReceivingUpdatesAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (StartReceiving)");
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>()
            };
            _botClient.StartReceiving(
                updateHandler: UpdateHandler,
                errorHandler: ErrorHandler,
                receiverOptions: receiverOptions,
                cancellationToken: cancellationToken
            );
            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –∑–∞–ø—É—â–µ–Ω–æ.");
            return Task.CompletedTask;
        }

        private async Task UpdateHandler(ITelegramBotClient client, Update update, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userService = scope.ServiceProvider.GetRequiredService<IUserService>();
            var intakeService = scope.ServiceProvider.GetRequiredService<IIntakeService>();
            var medicineService = scope.ServiceProvider.GetRequiredService<IMedicineService>();
            var courseService = scope.ServiceProvider.GetRequiredService<ICourseService>();

            if (update.Type == UpdateType.Message && update.Message?.Text != null)
            {
                var message = update.Message;
                var chatId = message.Chat.Id;
                var text = message.Text;

                _logger.LogInformation($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chatId}: {text}");

                var user = await userService.GetUserByTelegramId(chatId);

                if (text.StartsWith("/start"))
                {
                    if (user != null)
                    {
                        await SendMainMenu(chatId, $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.Name}! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", cancellationToken);
                    }
                    else
                    {
                        await _botClient.SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CureTracker Bot! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–≤—è–∑–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ CureTracker.", cancellationToken: cancellationToken);
                    }
                }
                else if (user == null)
                {
                    var code = text.Trim();
                    var userByCode = await userService.GetUserByConnectionCodeAsync(code);
                    if (userByCode != null)
                    {
                        try
                        {
                            await userService.UpdateUserTelegramId(userByCode.Id, chatId);
                            await _botClient.SendMessage(
                                chatId: chatId,
                                text: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å CureTracker! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤.",
                                cancellationToken: cancellationToken);
                            await SendMainMenu(chatId, "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", cancellationToken);
                            _logger.LogInformation($"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userByCode.Id} —Å–≤—è–∑–∞–Ω —Å Telegram ID {chatId}");
                        }
                        catch (Core.Exceptions.TelegramIdAlreadyLinkedException ex)
                        {
                            _logger.LogWarning(ex, $"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID {chatId} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {userByCode.Id}");
                            await _botClient.SendMessage(
                                chatId: chatId,
                                text: "–≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –∫ —Ç–µ–∫—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É CureTracker, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤—è–∂–∏—Ç–µ –µ–≥–æ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                cancellationToken: cancellationToken);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userByCode.Id}");
                            await _botClient.SendMessage(
                                chatId: chatId,
                                text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                cancellationToken: cancellationToken);
                        }
                    }
                    else
                    {
                        await _botClient.SendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ CureTracker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", cancellationToken: cancellationToken);
                    }
                }
                else // User is authenticated, process menu commands
                {
                    switch (text)
                    {
                        case "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞":
                            await SendMedicinesList(chatId, user.Id, medicineService, cancellationToken);
                            break;
                        case "–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
                            await SendTodayIntakes(chatId, user.Id, intakeService, courseService, cancellationToken);
                            break;
                        case "‚ùì –ü–æ–º–æ—â—å":
                            await SendHelpMessage(chatId, cancellationToken);
                            break;
                        case "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
                            await _botClient.SendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.", replyMarkup: new ReplyKeyboardRemove(), cancellationToken: cancellationToken);
                            await SendMainMenu(chatId, "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", cancellationToken);
                            break;
                        default:
                            await _botClient.SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", cancellationToken: cancellationToken);
                            break;
                    }
                }
            }
            else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
            {
                var callbackQuery = update.CallbackQuery;
                var chatId = callbackQuery.Message.Chat.Id;
                var callbackData = callbackQuery.Data;

                _logger.LogInformation($"–ü–æ–ª—É—á–µ–Ω CallbackQuery –æ—Ç {chatId} —Å –¥–∞–Ω–Ω—ã–º–∏: {callbackData}");

                if (string.IsNullOrEmpty(callbackData))
                {
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.", cancellationToken: cancellationToken);
                    return;
                }

                var parts = callbackData.Split('_');
                if (parts.Length != 3 || !parts[0].Equals("intake"))
                {
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.", cancellationToken: cancellationToken);
                    _logger.LogWarning($"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callbackData: {callbackData}");
                    return;
                }

                var action = parts[1];
                if (!Guid.TryParse(parts[2], out var intakeId))
                {
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–∏–µ–º–∞.", cancellationToken: cancellationToken);
                    _logger.LogWarning($"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å intakeId –∏–∑ callbackData: {callbackData}");
                    return;
                }

                try
                {
                    long telegramChatId = callbackQuery.From.Id;
                    var appUser = await userService.GetUserByTelegramId(telegramChatId);

                    if (appUser == null)
                    {
                        await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞: –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ.", cancellationToken: cancellationToken, showAlert: true);
                        _logger.LogWarning($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegramChatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è callbackData: {callbackData}");
                        return;
                    }

                    var intake = await intakeService.GetIntakeByIdAsync(intakeId, appUser.Id);

                    if (intake == null)
                    {
                        await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞: –ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.", cancellationToken: cancellationToken, showAlert: true);
                        _logger.LogWarning($"–ü—Ä–∏–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å ID {intakeId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {appUser.Id} (callbackData: {callbackData})");
                        return;
                    }

                    string responseText = string.Empty;
                    bool success = false;

                    if (action.Equals("taken"))
                    {
                        await intakeService.MarkIntakeAsTakenAsync(intakeId, appUser.Id);
                        responseText = "–ü—Ä–∏–µ–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–∏–Ω—è—Ç–æ'.";
                        _logger.LogInformation($"–ü—Ä–∏–µ–º {intakeId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–∏–Ω—è—Ç–æ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {appUser.Id}");
                        success = true;
                    }
                    else if (action.Equals("skipped"))
                    {
                        await intakeService.MarkIntakeAsSkippedAsync(intakeId, "–ü—Ä–æ–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", appUser.Id);
                        responseText = "–ü—Ä–∏–µ–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–æ–ø—É—â–µ–Ω–æ'.";
                        _logger.LogInformation($"–ü—Ä–∏–µ–º {intakeId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–æ–ø—É—â–µ–Ω–æ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {appUser.Id}");
                        success = true;
                    }
                    else
                    {
                        responseText = "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.";
                        _logger.LogWarning($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –≤ callbackData: {callbackData}");
                    }

                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, responseText, cancellationToken: cancellationToken, showAlert: !success);

                    if (success && callbackQuery.Message != null)
                    {
                        string originalMessageText = callbackQuery.Message.Text ?? string.Empty;
                        string newText = $"{originalMessageText}\n–°—Ç–∞—Ç—É—Å: {responseText}";

                        await _botClient.EditMessageText(
                            chatId: chatId,
                            messageId: callbackQuery.Message.MessageId,
                            text: newText,
                            replyMarkup: null,
                            cancellationToken: cancellationToken);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CallbackQuery –¥–ª—è intakeId {intakeId}");
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", cancellationToken: cancellationToken);
                }
            }
        }

        private async Task SendMainMenu(long chatId, string text, CancellationToken cancellationToken)
        {
            var replyKeyboardMarkup = new ReplyKeyboardMarkup(new[]
            {
                new KeyboardButton[] { "–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞" },
                new KeyboardButton[] { "‚ùì –ü–æ–º–æ—â—å", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç" }
            })
            {
                ResizeKeyboard = true
            };

            await _botClient.SendMessage(
                chatId: chatId,
                text: text,
                replyMarkup: replyKeyboardMarkup,
                cancellationToken: cancellationToken);
        }

        private async Task SendMedicinesList(long chatId, Guid userId, IMedicineService medicineService, CancellationToken cancellationToken)
        {
            var medicines = await medicineService.GetMedicinesByUserId(userId);
            if (medicines.Any())
            {
                var messageBuilder = new StringBuilder();
                messageBuilder.AppendLine("–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:");
                foreach (var medicine in medicines)
                {
                    messageBuilder.AppendLine($"- *{medicine.Name}* ({medicine.DosagePerTake} –º–≥)");
                }
                await _botClient.SendMessage(chatId, messageBuilder.ToString(), parseMode: ParseMode.Markdown, cancellationToken: cancellationToken);
            }
            else
            {
                await _botClient.SendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.", cancellationToken: cancellationToken);
            }
        }

        private async Task SendTodayIntakes(long chatId, Guid userId, IIntakeService intakeService, ICourseService courseService, CancellationToken cancellationToken)
        {
            var today = DateTime.UtcNow;
            var intakes = await intakeService.GetScheduledIntakesForDateRangeAsync(userId, today.Date, today.Date.AddDays(1).AddTicks(-1));

            if (intakes.Any())
            {
                var messageBuilder = new StringBuilder();
                messageBuilder.AppendLine("–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:");
                foreach (var intake in intakes.OrderBy(i => i.ScheduledTime))
                {
                    var course = await courseService.GetCourseByIdAsync(intake.CourseId, userId);
                    var medicineName = course?.Medicine?.Name ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ";

                    var status = intake.Status switch
                    {
                        IntakeStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
                        IntakeStatus.Taken => "–ü—Ä–∏–Ω—è—Ç–æ",
                        IntakeStatus.Missed => "–ü—Ä–æ–ø—É—â–µ–Ω–æ",
                        IntakeStatus.Skipped => "–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ)",
                        _ => ""
                    };
                    var localTime = TimeZoneInfo.ConvertTimeFromUtc(intake.ScheduledTime, TimeZoneInfo.Local);
                    messageBuilder.AppendLine($"- *{localTime:HH:mm}* - {medicineName} ({status})");
                }
                await _botClient.SendMessage(chatId, messageBuilder.ToString(), parseMode: ParseMode.Markdown, cancellationToken: cancellationToken);
            }
            else
            {
                await _botClient.SendMessage(chatId, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤.", cancellationToken: cancellationToken);
            }
        }

        private async Task SendHelpMessage(long chatId, CancellationToken cancellationToken)
        {
            var helpText = "CureTracker - —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –ø—Ä–∏—ë–º–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n" +
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n" +
                           "üíä *–õ–µ–∫–∞—Ä—Å—Ç–≤–∞* - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.\n" +
                           "*–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏—ë–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n" +
                           "üóëÔ∏è *–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç* - —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞.\n\n" +
                           "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏—ë–º–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.";
            await _botClient.SendMessage(chatId, helpText, parseMode: ParseMode.Markdown, cancellationToken: cancellationToken);
        }

        private Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken cancellationToken)
        {
            _logger.LogError(exception, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (Polling ErrorHandler)");
            return Task.CompletedTask;
        }
    }
}