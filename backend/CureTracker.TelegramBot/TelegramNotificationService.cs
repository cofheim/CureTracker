using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Text;
using CureTracker.Core.Interfaces;
using CureTracker.Core.Models;

namespace CureTracker.TelegramBot
{
    public class TelegramNotificationService
    {
        private readonly TelegramBotClient _botClient;
        private readonly ILogger<TelegramNotificationService> _logger;
        private readonly IServiceScopeFactory _scopeFactory;

        public TelegramNotificationService(
            IConfiguration configuration,
            ILogger<TelegramNotificationService> logger,
            IServiceScopeFactory scopeFactory)
        {
            var token = configuration.GetSection("TelegramBot:Token").Value;
            if (string.IsNullOrEmpty(token))
            {
                _logger.LogError("Telegram Bot Token is not configured.");
                throw new ArgumentNullException(nameof(token), "Telegram Bot Token cannot be null or empty.");
            }
            _botClient = new TelegramBotClient(token);
            _logger = logger;
            _scopeFactory = scopeFactory;
        }

        public async Task SendNotificationAsync(long chatId, string message, Guid intakeId)
        {
            try
            {
                var inlineKeyboard = new InlineKeyboardMarkup(new[]
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–∏–Ω—è—Ç–æ", callbackData: $"intake_taken_{intakeId}"),
                        InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–æ–ø—É—â–µ–Ω–æ", callbackData: $"intake_skipped_{intakeId}"),
                    }
                });

                await _botClient.SendMessage(
                    chatId: chatId,
                    text: message,
                    replyMarkup: inlineKeyboard,
                    cancellationToken: default);

                _logger.LogInformation($"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è intakeId {intakeId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {chatId}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è intakeId {intakeId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {chatId}");
            }
        }

        public Task StartReceivingUpdatesAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (StartReceiving)");
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>()
            };
            _botClient.StartReceiving(
                updateHandler: UpdateHandler,
                errorHandler: ErrorHandler,
                receiverOptions: receiverOptions,
                cancellationToken: cancellationToken
            );
            _logger.LogInformation("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –∑–∞–ø—É—â–µ–Ω–æ.");
            return Task.CompletedTask;
        }

        private async Task UpdateHandler(ITelegramBotClient client, Update update, CancellationToken cancellationToken)
        {
            using var scope = _scopeFactory.CreateScope();
            var userService = scope.ServiceProvider.GetRequiredService<IUserService>();
            var intakeService = scope.ServiceProvider.GetRequiredService<IIntakeService>();
            var medicineService = scope.ServiceProvider.GetRequiredService<IMedicineService>();
            var courseService = scope.ServiceProvider.GetRequiredService<ICourseService>();
            var actionLogService = scope.ServiceProvider.GetRequiredService<IActionLogService>();

            if (update.Type == UpdateType.Message && update.Message?.Text != null)
            {
                var message = update.Message;
                var chatId = message.Chat.Id;
                var text = message.Text;

                _logger.LogInformation($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chatId}: {text}");

                var user = await userService.GetUserByTelegramId(chatId);

                if (user != null)
                {
                    // Authenticated User Logic
                    if (text.StartsWith("/start"))
                    {
                        await SendMainMenu(chatId, $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.Name}! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", cancellationToken);
                    }
                    else
                    {
                        switch (text)
                        {
                            case "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞":
                                await SendMedicinesList(chatId, user.Id, medicineService, cancellationToken);
                                break;
                            case "–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
                                await SendTodayIntakes(chatId, user, intakeService, courseService, cancellationToken);
                                break;
                            case "‚ùì –ü–æ–º–æ—â—å":
                                await SendHelpMessage(chatId, cancellationToken);
                                break;
                            case "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π":
                                await SendActionHistoryOptions(chatId, cancellationToken);
                                break;
                            default:
                                await _botClient.SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", cancellationToken: cancellationToken);
                                break;
                        }
                    }
                }
                else
                {
                    // Unauthenticated User Logic
                    if (text.StartsWith("/start"))
                    {
                        var inlineKeyboard = new InlineKeyboardMarkup(new[]
                        {
                            InlineKeyboardButton.WithCallbackData(text: "–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callbackData: "how_to_link")
                        });
                        await _botClient.SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CureTracker Bot! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", replyMarkup: inlineKeyboard, cancellationToken: cancellationToken);
                    }
                    else if (text == "‚ùì –ü–æ–º–æ—â—å")
                    {
                        await SendHelpMessage(chatId, cancellationToken);
                    }
                    else if (text == "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞" || text == "–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" || text == "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
                    {
                         await _botClient.SendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.", cancellationToken: cancellationToken);
                    }
                    else
                    {
                        // Assume it's a connection code
                        var code = text.Trim();
                        var userByCode = await userService.GetUserByConnectionCodeAsync(code);
                        if (userByCode != null)
                        {
                            try
                            {
                                await userService.UpdateUserTelegramId(userByCode.Id, chatId);
                                await _botClient.SendMessage(
                                    chatId: chatId,
                                    text: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å CureTracker!",
                                    cancellationToken: cancellationToken);
                                await SendMainMenu(chatId, "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?", cancellationToken);
                                _logger.LogInformation($"–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userByCode.Id} —Å–≤—è–∑–∞–Ω —Å Telegram ID {chatId}");
                            }
                            catch (Core.Exceptions.TelegramIdAlreadyLinkedException ex)
                            {
                                _logger.LogWarning(ex, $"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID {chatId} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {userByCode.Id}");
                                await _botClient.SendMessage(
                                    chatId: chatId,
                                    text: "–≠—Ç–æ—Ç Telegram-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                                    cancellationToken: cancellationToken);
                            }
                            catch (Exception ex)
                            {
                                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userByCode.Id}");
                                await _botClient.SendMessage(
                                    chatId: chatId,
                                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.",
                                    cancellationToken: cancellationToken);
                            }
                        }
                        else
                        {
                            await _botClient.SendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏.", cancellationToken: cancellationToken);
                        }
                    }
                }
            }
            else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
            {
                var callbackQuery = update.CallbackQuery;
                var chatId = callbackQuery.Message.Chat.Id;
                var callbackData = callbackQuery.Data;

                var user = await userService.GetUserByTelegramId(chatId);
                if (user == null)
                {
                    // Handle unauthenticated user trying to use callbacks for authenticated features
                    if(callbackData == "how_to_link")
                    {
                         await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                         await SendLinkingInstructions(chatId, cancellationToken);
                    }
                    else
                    {
                        await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", showAlert: true, cancellationToken: cancellationToken);
                    }
                    return;
                }
                
                _logger.LogInformation($"–ü–æ–ª—É—á–µ–Ω CallbackQuery –æ—Ç {chatId} —Å –¥–∞–Ω–Ω—ã–º–∏: {callbackData}");

                if (callbackData == "history_by_medicine")
                {
                    await SendMedicineSelectionForHistory(chatId, user.Id, medicineService, cancellationToken);
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                    return;
                }

                if (callbackData == "history_by_course")
                {
                    await SendCourseSelectionForHistory(chatId, user.Id, courseService, cancellationToken);
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                    return;
                }

                if (callbackData.StartsWith("history_medicine_"))
                {
                    var medicineId = Guid.Parse(callbackData.Split('_')[2]);
                    await SendActionLogs(chatId, user, "medicine", medicineId, actionLogService, cancellationToken);
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                    return;
                }

                if (callbackData.StartsWith("history_course_"))
                {
                    var courseId = Guid.Parse(callbackData.Split('_')[2]);
                    await SendActionLogs(chatId, user, "course", courseId, actionLogService, cancellationToken);
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                    return;
                }

                if (callbackData == "how_to_link")
                {
                    await _botClient.AnswerCallbackQuery(callbackQuery.Id, cancellationToken: cancellationToken);
                    await SendLinkingInstructions(chatId, cancellationToken);
                    return;
                }
                
                if (callbackData.StartsWith("intake_taken_"))
                {
                    var intakeIdStr = callbackData.Split('_').Last();
                    if (Guid.TryParse(intakeIdStr, out var intakeId))
                    {
                        try
                        {
                            await intakeService.MarkIntakeAsTakenAsync(intakeId, user.Id);
                            await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–ü—Ä–∏—ë–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–∏–Ω—è—Ç–æ'", cancellationToken: cancellationToken);
                            await _botClient.EditMessageText(chatId, callbackQuery.Message.MessageId, "–ü—Ä–∏—ë–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–∏–Ω—è—Ç–æ'", cancellationToken: cancellationToken);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏—ë–º–∞ {intakeId} –∫–∞–∫ '–ü—Ä–∏–Ω—è—Ç–æ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Id}");
                            await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", showAlert: true, cancellationToken: cancellationToken);
                        }
                    }
                    return;
                }

                if (callbackData.StartsWith("intake_skipped_"))
                {
                    var intakeIdStr = callbackData.Split('_').Last();
                    if (Guid.TryParse(intakeIdStr, out var intakeId))
                    {
                        try
                        {
                            await intakeService.MarkIntakeAsSkippedAsync(intakeId, "–ü—Ä–æ–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram", user.Id);
                            await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–ü—Ä–∏—ë–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–æ–ø—É—â–µ–Ω–æ'", cancellationToken: cancellationToken);
                            await _botClient.EditMessageText(chatId, callbackQuery.Message.MessageId, "–ü—Ä–∏—ë–º –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ '–ü—Ä–æ–ø—É—â–µ–Ω–æ'", cancellationToken: cancellationToken);
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏—ë–º–∞ {intakeId} –∫–∞–∫ '–ü—Ä–æ–ø—É—â–µ–Ω–æ' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Id}");
                            await _botClient.AnswerCallbackQuery(callbackQuery.Id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", showAlert: true, cancellationToken: cancellationToken);
                        }
                    }
                    return;
                }
            }
        }
        
        private async Task SendMainMenu(long chatId, string text, CancellationToken cancellationToken)
        {
            var replyKeyboardMarkup = new ReplyKeyboardMarkup(new[]
            {
                new KeyboardButton[] { "–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞" },
                new KeyboardButton[] { "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π", "‚ùì –ü–æ–º–æ—â—å" }
            })
            {
                ResizeKeyboard = true
            };

            await _botClient.SendMessage(chatId, text, replyMarkup: replyKeyboardMarkup, cancellationToken: cancellationToken);
        }

        private async Task SendMedicinesList(long chatId, Guid userId, IMedicineService medicineService, CancellationToken cancellationToken)
        {
            var medicines = await medicineService.GetMedicinesByUserId(userId);
            var text = new StringBuilder("–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n");
            foreach (var med in medicines)
            {
                text.AppendLine($"- {med.Name}");
            }
            await _botClient.SendMessage(chatId, text.ToString(), cancellationToken: cancellationToken);
        }

        private async Task SendTodayIntakes(long chatId, Core.Models.User user, IIntakeService intakeService, ICourseService courseService, CancellationToken cancellationToken)
        {
            try
            {
                _logger.LogInformation($"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–µ–º–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Id} —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º {user.TimeZoneId}");
                
                var userTimeZone = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId ?? "UTC");
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var nowInUserTz = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, userTimeZone);
                var startOfDayInUserTz = nowInUserTz.Date;
                var endOfDayInUserTz = startOfDayInUserTz.AddDays(1).AddTicks(-1);

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
                var startDateUtc = TimeZoneInfo.ConvertTimeToUtc(startOfDayInUserTz, userTimeZone);
                var endDateUtc = TimeZoneInfo.ConvertTimeToUtc(endOfDayInUserTz, userTimeZone);

                var intakes = await intakeService.GetScheduledIntakesForDateRangeAsync(user.Id, startDateUtc, endDateUtc);

                if (!intakes.Any())
                {
                    await _botClient.SendMessage(chatId, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—ë–º–æ–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.", cancellationToken: cancellationToken);
                    return;
                }

                var sb = new StringBuilder("–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n");
                foreach (var intake in intakes.OrderBy(i => i.ScheduledTime))
                {
                    var course = await courseService.GetCourseByIdAsync(intake.CourseId, user.Id);
                    var localIntakeTime = TimeZoneInfo.ConvertTimeFromUtc(intake.ScheduledTime, userTimeZone);
                    sb.AppendLine($"*{(course?.Name ?? "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")}*");
                    sb.AppendLine($"–í—Ä–µ–º—è: {localIntakeTime:HH:mm}");
                    sb.AppendLine($"–°—Ç–∞—Ç—É—Å: {TranslateIntakeStatus(intake.Status)}");
                    sb.AppendLine("-----");
                }

                await _botClient.SendMessage(chatId, sb.ToString(), ParseMode.Markdown, cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—ë–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Id}");
                await _botClient.SendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—ë–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", cancellationToken: cancellationToken);
            }
        }

        private string GetLinkingInstructionsText()
        {
            return "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç CureTracker –∫ —ç—Ç–æ–º—É –±–æ—Ç—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n" +
                   "1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ CureTracker.\n" +
                   "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ—Ñ–∏–ª—å'.\n" +
                   "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥' –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram'.\n" +
                   "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n\n" +
                   "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫—É—Ä—Å–∞–º–∏ –ø—Ä—è–º–æ –∏–∑ Telegram.";
        }

        private async Task SendLinkingInstructions(long chatId, CancellationToken cancellationToken)
        {
            await _botClient.SendMessage(chatId, GetLinkingInstructionsText(), cancellationToken: cancellationToken);
        }
        
        private async Task SendHelpMessage(long chatId, CancellationToken cancellationToken)
        {
            var helpText = "–Ø –±–æ—Ç CureTracker, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –ø—Ä–∏—ë–º–æ–º –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n" +
                           "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π:\n" +
                           "üîπ *–ü—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏—ë–º—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n" +
                           "üîπ *–õ–µ–∫–∞—Ä—Å—Ç–≤–∞* - (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.\n" +
                           "üîπ *–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n" +
                           "üîπ *–ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n" +
                           "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∏–ª–∏ –æ—Ç–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π:\n" +
                           GetLinkingInstructionsText();
            await _botClient.SendMessage(chatId, helpText, ParseMode.Markdown, cancellationToken: cancellationToken);
        }
        
        private async Task SendActionHistoryOptions(long chatId, CancellationToken cancellationToken)
        {
            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("–ü–æ –ª–µ–∫–∞—Ä—Å—Ç–≤—É", "history_by_medicine") },
                new[] { InlineKeyboardButton.WithCallbackData("–ü–æ –∫—É—Ä—Å—É", "history_by_course") },
            });
            await _botClient.SendMessage(chatId, "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é?", replyMarkup: inlineKeyboard, cancellationToken: cancellationToken);
        }

        private async Task SendMedicineSelectionForHistory(long chatId, Guid userId, IMedicineService medicineService, CancellationToken cancellationToken)
        {
            var medicines = await medicineService.GetMedicinesByUserId(userId);
            if (!medicines.Any())
            {
                await _botClient.SendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏.", cancellationToken: cancellationToken);
                return;
            }

            var buttons = medicines.Select(m => new[] { InlineKeyboardButton.WithCallbackData(m.Name, $"history_medicine_{m.Id}") }).ToArray();
            var inlineKeyboard = new InlineKeyboardMarkup(buttons);

            await _botClient.SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", replyMarkup: inlineKeyboard, cancellationToken: cancellationToken);
        }

        private async Task SendCourseSelectionForHistory(long chatId, Guid userId, ICourseService courseService, CancellationToken cancellationToken)
        {
            var courses = await courseService.GetAllCoursesForUserAsync(userId);
            if (courses.Any())
            {
                var buttons = courses.Select(c => InlineKeyboardButton.WithCallbackData(c.Name, $"history_course_{c.Id}")).ToList();
                var inlineKeyboard = new InlineKeyboardMarkup(buttons.Select(b => new[] { b }));
                await _botClient.SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", replyMarkup: inlineKeyboard, cancellationToken: cancellationToken);
            }
            else
            {
                await _botClient.SendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", cancellationToken: cancellationToken);
            }
        }
        
        private async Task SendActionLogs(long chatId, Core.Models.User user, string entityType, Guid entityId, IActionLogService actionLogService, CancellationToken cancellationToken)
        {
            try
            {
                var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(user.TimeZoneId ?? "UTC");
                var logs = await actionLogService.GetRelatedEntityLogsAsync(entityId, entityType, user.Id);
                
                if (!logs.Any())
                {
                    await _botClient.SendMessage(chatId, "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–∞.", cancellationToken: cancellationToken);
                    return;
                }

                var sb = new StringBuilder("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:\n");
                foreach (var log in logs.OrderByDescending(l => l.Timestamp))
                {
                    var localTime = TimeZoneInfo.ConvertTimeFromUtc(log.Timestamp, timeZoneInfo);
                    sb.AppendLine($"{localTime:dd.MM.yyyy HH:mm} - {log.Description}");
                }

                await _botClient.SendMessage(chatId, sb.ToString(), cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Id}");
                await _botClient.SendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", cancellationToken: cancellationToken);
            }
        }
        
        private string TranslateIntakeStatus(Core.Enums.IntakeStatusEnum.IntakeStatus status)
        {
            return status switch
            {
                Core.Enums.IntakeStatusEnum.IntakeStatus.Scheduled => "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
                Core.Enums.IntakeStatusEnum.IntakeStatus.Taken => "–ü—Ä–∏–Ω—è—Ç–æ",
                Core.Enums.IntakeStatusEnum.IntakeStatus.Skipped => "–ü—Ä–æ–ø—É—â–µ–Ω–æ",
                Core.Enums.IntakeStatusEnum.IntakeStatus.Missed => "–ü—Ä–æ–ø—É—â–µ–Ω–æ",
                _ => status.ToString()
            };
        }

        private Task ErrorHandler(ITelegramBotClient client, Exception exception, CancellationToken cancellationToken)
        {
            _logger.LogError(exception, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ Telegram Bot");
            return Task.CompletedTask;
        }
    }
}