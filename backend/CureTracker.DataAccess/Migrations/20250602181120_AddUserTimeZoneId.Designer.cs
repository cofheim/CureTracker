// <auto-generated />
using System;
using CureTracker.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CureTracker.DataAccess.Migrations
{
    [DbContext(typeof(CureTrackerDbContext))]
    [Migration("20250602181120_AddUserTimeZoneId")]
    partial class AddUserTimeZoneId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CureTracker.DataAccess.Entities.ActionLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("IntakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("IntakeId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.CourseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IntakeFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MedicineEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SkippedDosesCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TakenDosesCount")
                        .HasColumnType("integer");

                    b.Property<int>("TimesADay")
                        .HasColumnType("integer");

                    b.Property<string>("TimesOfTaking")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MedicineEntityId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.IntakeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SkipReason")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Intakes");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.MedicineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("DosagePerTake")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionCode")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.ActionLogEntity", b =>
                {
                    b.HasOne("CureTracker.DataAccess.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("CureTracker.DataAccess.Entities.IntakeEntity", "Intake")
                        .WithMany()
                        .HasForeignKey("IntakeId");

                    b.HasOne("CureTracker.DataAccess.Entities.MedicineEntity", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", null)
                        .WithMany("ActionLogs")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Intake");

                    b.Navigation("Medicine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.CourseEntity", b =>
                {
                    b.HasOne("CureTracker.DataAccess.Entities.MedicineEntity", null)
                        .WithMany("Courses")
                        .HasForeignKey("MedicineEntityId");

                    b.HasOne("CureTracker.DataAccess.Entities.MedicineEntity", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", null)
                        .WithMany("Courses")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.IntakeEntity", b =>
                {
                    b.HasOne("CureTracker.DataAccess.Entities.CourseEntity", "Course")
                        .WithMany("Intakes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", null)
                        .WithMany("Intakes")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.MedicineEntity", b =>
                {
                    b.HasOne("CureTracker.DataAccess.Entities.UserEntity", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.CourseEntity", b =>
                {
                    b.Navigation("Intakes");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.MedicineEntity", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CureTracker.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("ActionLogs");

                    b.Navigation("Courses");

                    b.Navigation("Intakes");

                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
